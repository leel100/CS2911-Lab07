"""
- CS2911 - 022
- Fall 2018
- Lab 07
- Names:
  - Joe Casper
  - Lauren Lee

A simple email sending program.

Thanks to Trip Horbinski from the Fall 2015 class for providing the password-entering functionality.
"""

# GUI library for password entry
import tkinter as tk

# Socket library
import socket

# SSL/TLS library
import ssl

# base-64 encode/decode
import base64

# Python date/time and timezone modules
import datetime
import time

import pytz
import tzlocal

# Module for reading password from console without echoing it
import getpass

# Modules for some file operations
import os
import mimetypes

# Host name for MSOE (hosted) SMTP server
SMTP_SERVER = 'smtp.office365.com'

# The default port for STARTTLS SMTP servers is 587
SMTP_PORT = 587

# SMTP domain name
SMTP_DOMAINNAME = 'msoe.edu'


def main():
    """Main test method to send an SMTP email message.

    Modify data as needed/desired to test your code,
    but keep the same interface for the smtp_send
    method.
    """
    (username, password) = login_gui()

    message_info = {}
    message_info['To'] = 'leel@msoe.edu'
    message_info['From'] = username
    message_info['Subject'] = 'Yet another test message'
    message_info['Date'] = 'Thu, 9 Oct 2014 23:56:09 +0000'
    message_info['Date'] = get_formatted_date()

    message_text = 'I need more â˜•\r\n.\r\n'

    smtp_send(password, message_info, message_text)

    print("Message Sent")


def login_gui():
    """
    Creates a graphical user interface for secure user authorization.

    :return: (email_value, password_value)
        email_value -- The email address as a string.
        password_value -- The password as a string.

    :author: Tripp Horbinski
    """
    gui = tk.Tk()
    gui.title("MSOE Email Client")
    center_gui_on_screen(gui, 370, 120)

    tk.Label(gui, text="Please enter your MSOE credentials below:") \
        .grid(row=0, columnspan=2)
    tk.Label(gui, text="Email Address: ").grid(row=1)
    tk.Label(gui, text="Password:         ").grid(row=2)

    email = tk.StringVar()
    email_input = tk.Entry(gui, textvariable=email)
    email_input.grid(row=1, column=1)

    password = tk.StringVar()
    password_input = tk.Entry(gui, textvariable=password, show='*')
    password_input.grid(row=2, column=1)

    auth_button = tk.Button(gui, text="Authenticate", width=25, command=gui.destroy)
    auth_button.grid(row=3, column=1)

    gui.mainloop()

    email_value = email.get()
    password_value = password.get()

    return email_value, password_value


def center_gui_on_screen(gui, gui_width, gui_height):
    """Centers the graphical user interface on the screen.

    :param gui: The graphical user interface to be centered.
    :param gui_width: The width of the graphical user interface.
    :param gui_height: The height of the graphical user interface.
    :return: The graphical user interface coordinates for the center of the screen.
    :author: Tripp Horbinski
    """
    screen_width = gui.winfo_screenwidth()
    screen_height = gui.winfo_screenheight()
    x_coord = (screen_width / 2) - (gui_width / 2)
    y_coord = (screen_height / 2) - (gui_height / 2)

    return gui.geometry('%dx%d+%d+%d' % (gui_width, gui_height, x_coord, y_coord))


# *** Do not modify code above this line **
def smtp_send(password, message_info, message_text):
    """
    Sends an email using smtp protocol
    :param password: The user's password that accesses the email account
    :param message_info: Holds the From, To, Subject, and Date headers
    :param message_text: The text held inside the message
    :author: Joe Casper
    """
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_socket.connect((SMTP_SERVER, SMTP_PORT))

    # Get the initial response from the server. This response should contain a 220
    response = get_response(tcp_socket)

    while b'221' not in response:
        if b'220' in response:
            response = send_ehlo(tcp_socket)

        elif b'STARTTLS' in response:
            tcp_socket.send(b'STARTTLS\r\n')
            response = send_with_encryption(password, message_info, message_text, tcp_socket)


def send_with_encryption(password, message_info, message_text, tcp_socket):
    """
    Encrypts the tcp_socket
    :param password: The users password for their email address
    :param message_info: the headers of the email
    :param message_text: the text of the email
    :param tcp_socket: the socket that has the connection
    :return: a response from the server
    :author: Joe Casper
    """
    response = read_line(tcp_socket)

    # encrypt & wrap socket
    context = ssl.create_default_context()
    wrapped_socket = context.wrap_socket(tcp_socket, server_hostname=SMTP_SERVER)

    while b'221' not in response:
        if b'220' in response:
            response = send_ehlo(wrapped_socket)
        elif b'AUTH LOGIN' in response:
            wrapped_socket.send(b'AUTH LOGIN\r\n')
            response = read_line(wrapped_socket)
        elif b'334' in response:
            response = send_username_and_pass(message_info.get("From"), password, wrapped_socket)
        elif b'235' in response:
            response = send_mail_from(message_info.get("From"), message_info.get("To"), message_text, wrapped_socket)

    return response


def send_mail_from(user, to, message_text, socket):
    """
    This is the method that finally sends the email.
    :param user: The user's email address
    :param to: The recipient's email address
    :param message_text: The text of the email
    :param socket: the socket that is connected to the network
    :return: a response from the server
    :author: Joe Casper and Lauren Lee 
    """

    socket.send(b'MAIL FROM: ' + user.encode('UTF-8') + b'\r\n')
    response = read_line(socket)

    if b'250' in response:
        socket.send(b'RCPT TO: ' + to.encode('UTF-8') + b'\r\n')
        response = read_line(socket)

    if b'250' in response:
        socket.send(b'DATA\r\n')
        socket.send(b'To: ' + to.encode('UTF-8') + b'\r\n')
        socket.sendall(b'Subject: This is the subject\r\n')
        socket.sendall(u'Content-Type : content="text/plain" charset="UTF-8"\r\n'.encode('UTF-8'))
        date = get_formatted_date()
        date = str.encode(date)
        socket.send(b'Date: ' + date + b'\r\n\r\n')
        response = read_line(socket)

    if b'354' in response:
        message_text = message_text.encode("utf-8").decode()
        socket.send(message_text.encode('UTF-8') + b'\r\n')
        print(message_text.encode('UTF-8') + b'\r\n')
        response = read_line(socket)

    if b'250' in response:
        socket.send(b'QUIT\r\n')
        response = read_line(socket)

    return response


def send_username_and_pass(username, password, socket):
    """
    Sends the user's username and password to the server, both of which are encoded in base64
    :param username: the user's unencrypted username
    :param password: the user's unencrypted password
    :param socket: the socket that is connected to the network
    :return: a response from the network
    :author: Joe Casper
    """

    encoded_username = base64.b64encode(username.encode('UTF-8'))

    socket.send(encoded_username + b'\r\n')

    response = read_line(socket)

    encoded_password = base64.b64encode(password.encode('UTF-8'))

    socket.send(encoded_password + b'\r\n')

    return read_line(socket)


def send_ehlo(socket):
    """
    Sends 'EHLO' to the server, returns the response
    :param socket: socket connected to the server
    :return: the server's response
    :author Joe Casper
    """
    socket.send(b'EHLO\r\n')
    return get_response(socket)


def get_response(socket):
    """
    Reads in the response form the server. The method stops reading when the server
    sends a line that does not contain a dash
    :param socket: The socket that is connected to the network
    :return: the response from the server
    :author: Lauren Lee edited by Joe Casper
    """

    line = b'-'
    response = b''

    while b'-' in line:
        line = read_line(socket)
        response += line
    return response


def read_line(tcp_socket):
    """
    Reads one line of a response
    :param: the socket that is connected to the network
    :return: One line of a response
    :author: Joe Casper
    """
    byte = b''
    line = b''

    # run while the next byte is not \n
    while byte != b'\n':
        byte = next_byte(tcp_socket)
        line += byte

    return line


def read_single_line(tcp_socket):
    """
    The server will read a single line
    :return: returns the single line that is reads from the server
    :author: Lauren Lee
    """
    single_line = b''
    byte = b''

    # run until the next byte does not find \n
    while byte != b'\n':
        single_line += byte
        byte = next_byte(tcp_socket)

    return single_line


def next_byte(data_socket):
    """
    Read the next byte from the socket data_socket.

    Read the next byte from the sender, received over the network.
    If the byte has not yet arrived, this method blocks (waits)
      until the byte arrives.
    If the sender is done sending and is waiting for your response, this method blocks indefinitely.

    :param data_socket: The socket to read from. The data_socket argument should be an open tcp
                        data connection (either a client socket or a server data socket), not a tcp
                        server's listening socket.
    :return: the next byte, as a bytes object with a single byte in it
    :author: Joe Casper
    """
    return data_socket.recv(1)


# Your code and additional functions go here. (Replace this line, too.)

# ** Do not modify code below this line. **

# Utility functions
# You may use these functions to simplify your code.


def get_formatted_date():
    """Get the current date and time, in a format suitable for an email date header.

    The constant TIMEZONE_NAME should be one of the standard pytz timezone names.
    If you really want to see them all, call the print_all_timezones function.

    tzlocal suggested by http://stackoverflow.com/a/3168394/1048186

    See RFC 5322 for details about what the timezone should be
    https://tools.ietf.org/html/rfc5322

    :return: Formatted current date/time value, as a string.
    """
    zone = tzlocal.get_localzone()
    timestamp = datetime.datetime.now(zone)
    timestring = timestamp.strftime('%a, %d %b %Y %H:%M:%S %z')  # Sun, 06 Nov 1994 08:49:37 +0000
    return timestring


def print_all_timezones():
    """ Print all pytz timezone strings. """
    for tz in pytz.all_timezones:
        print(tz)


# You probably won't need the following methods, unless you decide to
# try to handle email attachments or send multi-part messages.
# These advanced capabilities are not required for the lab assignment.


def get_mime_type(file_path):
    """Try to guess the MIME type of a file (resource), given its path (primarily its file extension)

    :param file_path: String containing path to (resource) file, such as './abc.jpg'
    :return: If successful in guessing the MIME type, a string representing the content
             type, such as 'image/jpeg'
             Otherwise, None
    :rtype: int or None
    """

    mime_type_and_encoding = mimetypes.guess_type(file_path)
    mime_type = mime_type_and_encoding[0]
    return mime_type


def get_file_size(file_path):
    """Try to get the size of a file (resource) in bytes, given its path

    :param file_path: String containing path to (resource) file, such as './abc.html'

    :return: If file_path designates a normal file, an integer value representing the the file size in bytes
             Otherwise (no such file, or path is not a file), None
    :rtype: int or None
    """

    # Initially, assume file does not exist
    file_size = None
    if os.path.isfile(file_path):
        file_size = os.stat(file_path).st_size
    return file_size


main()
